// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2006-2019 Petr Ročkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-trace"
#include <unistd.h>

#ifdef __divine__
#include <sys/fault.h>
#endif

/* This file provides an assortment of assertion macros which provide
 * additional information about the circumstances of assertion failures, for
 * instance ASSERT_EQ will print both the source code statement and the actual
 * values that unexpectedly compared inequal.
 *
 * The assertion failure mechanism is currently implemented as an exception,
 * with the intention to be catchable, if the user so desires. This can be used
 * to e.g. print additional context information relevant to the failure, as the
 * stack is being unwound.
 *
 * Additionally, this files provides a stub version of the TEST() macro, a real
 * version of which is implemented in brick-unittest. This allows unit test
 * suites to be included in header files along with the code that they test
 * (without the testcases being actually registered or instantiatied unless the
 * unit testsuite is being built). */

#ifndef TEST
#define TEST(n)         template< bool > void n()
#endif

#define BRICK_ASSERT(...) \
    ::brq::assert_fn< brick_enable_assertions > \
                    ( BRICK_LOCATION, \
                      std::tuple{ BRICK_SHARP_0( __VA_ARGS__ ) }, \
                      std::forward_as_tuple( BRICK_DELAY_0( __VA_ARGS__ ) ) )

#define BRICK_CHECK_ENABLED(x) \
    ( ::brq::array_contains( ::brq::brick_enable_assertions_in, "everything" ) || \
      ::brq::array_contains( ::brq::brick_enable_assertions_in, #x ) ) && \
    !::brq::array_contains( ::brq::brick_disable_assertions_in, #x )

#define BRICK_OPTIONAL_ASSERTIONS(x) \
    static constexpr bool brick_enable_assertions = BRICK_CHECK_ENABLED( x )

constexpr bool brick_enable_assertions = true; /* must be global, unfortunately */

#ifndef BRICK_CHECK
#define BRICK_CHECK everything
#endif

#ifndef BRICK_NO_CHECK
#define BRICK_NO_CHECK
#endif

#ifdef NDEBUG

#define ASSERT(...)      static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_PRED(...) static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_EQ(...)   static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_LEQ(...)  static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_LT(...)   static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_NEQ(...)  static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_QUIET

#else

#define BRICK_ASSERT_BIN(op, inv, ...) \
    ::brq::assert_bin_fn< brick_enable_assertions > \
                        ( BRICK_LOCATION, \
                          []( const auto &a, const auto &b ) { return a op b; }, \
                          #op, std::tuple{ BRICK_SHARP_0( __VA_ARGS__ ) }, \
                               std::forward_as_tuple( BRICK_DELAY_0( __VA_ARGS__ ) ) )

#define ASSERT(...)     BRICK_ASSERT( __VA_ARGS__ )
#define ASSERT_EQ(...)  BRICK_ASSERT_BIN( ==, !=, __VA_ARGS__ )
#define ASSERT_LT(...)  BRICK_ASSERT_BIN(  <, >=, __VA_ARGS__ )
#define ASSERT_LEQ(...) BRICK_ASSERT_BIN( <=, >,  __VA_ARGS__ )
#define ASSERT_NEQ(...) BRICK_ASSERT_BIN( !=, ==, __VA_ARGS__ )
#define ASSERT_QUIET ::brq::assert_quiet _brq_assert_quiet

#endif

#define UNREACHABLE(...)   ( BRICK_ASSERT( false, __VA_ARGS__ ), __builtin_trap() )
#define NOT_IMPLEMENTED()  ( BRICK_ASSERT( false, "missing implementation" ), __builtin_trap() )

#define BRICK_LOCATION ::brq::trace_location{ __LINE__, __FILE__ }
#define BRICK_SHARP( ... ) BRICK_SHARP_0( __VA_ARGS__ )

namespace brq
{
    template< std::size_t N > struct string_view_array : std::array< std::string_view, N > {};

    template< typename... args_t >
    string_view_array( args_t... ) -> string_view_array< sizeof...( args_t ) >;

    constexpr string_view_array brick_enable_assertions_in = { BRICK_SHARP( BRICK_CHECK ) };
    constexpr string_view_array brick_disable_assertions_in = { BRICK_SHARP( BRICK_NO_CHECK ) };

    template< typename elem_t, std::size_t N, std::size_t I = 0 >
    constexpr bool array_contains( const std::array< elem_t, N > &array, const elem_t &what )
    {
        if constexpr ( I == N )
            return false;
        else
            return array[ I ] == what || array_contains< elem_t, N, I + 1 >( array, what );
    }

    template< std::size_t N >
    constexpr bool array_contains( const string_view_array< N > &a, std::string_view w )
    {
        return array_contains< std::string_view, N >( a, w );
    }

    struct assert_config
    {
        bool throw_on_fail = false;
        bool quiet = false;
    };

    struct assert_quiet
    {
        bool was_quiet;
        bool &quiet() { return singleton< assert_config >().quiet; }
        assert_quiet()  { was_quiet = quiet(); quiet() = true; }
        ~assert_quiet() { quiet() = was_quiet; }
    };

    struct stacked_error
    {
        stacked_error *previous;
        bool previous_valid = true;

        static inline thread_local stacked_error *active = nullptr;

        stacked_error()
        {
            previous = active;
            active = this;
        }

        stacked_error( stacked_error &&o )
            : previous( o.previous )
        {
            active = this;
            o.previous_valid = false;
        }

        ~stacked_error()
        {
            if ( previous_valid )
                active = previous;
        }

        virtual const char *describe() const noexcept = 0;
    };

    struct assert_failed : string_builder, stacked_error
    {
        struct fail_ref
        {
            assert_failed &ref;
            explicit fail_ref( assert_failed &f ) : ref( f ) {}
        };

        template< typename X >
        friend inline auto operator<<( fail_ref f, const X &x )
            -> decltype( std::declval< string_builder & >() << x, f.ref )
        {
            f.ref << x;
            return f.ref;
        }

        assert_failed( const trace_location &l )
        {
            std::string_view file( l._file );
            int slashes = 0;

            for ( auto c : file )
                if ( c == '/' )
                    ++ slashes;

            while ( slashes >= 3 )
            {
                file.remove_prefix( file.find( "/" ) + 1 );
                -- slashes;
            }

            if ( file != l._file )
                (*this) << "…/";
            (*this) << file << ":" << l.line;
            (*this) << ": ";
        }

        const char *what() const noexcept { return buffer(); }
        const char *describe() const noexcept { return buffer(); }
    };

    [[noreturn]] inline void assert_signal( assert_failed &err )
    {
#if !defined(__divine__)
        if ( singleton< assert_config >().throw_on_fail )
            throw std::move( err );
#endif

#if defined(__divine__)
        if ( err.truncated() )
            __vm_cancel();
        __dios_fault( _VM_F_Assert, err.what() );
        __builtin_trap();
#else
        ERROR( err.what() );
        std::abort();
#endif
    }

    template< bool enable, typename... names_t, typename... vals_t >
    void assert_fn( const trace_location &l,
                    std::tuple< names_t... > names, std::tuple< vals_t... > vals )
    {
        if constexpr ( enable )
        {
            if ( !singleton< assert_config >().quiet )
            {
                std::tuple prefix{ "assert ", std::get< 0 >( names ),
                                   sizeof...( names_t ) > 1 ? ": " : "" };

                trace_fn< trace_fmt::packed, trace_level::debug >
                (
                    l, std::tuple_cat( prefix, tuple_drop( names ) ),
                       std::tuple_cat( prefix, tuple_drop( vals ) )
                );
            }

            if ( auto val = BRICK_FORCE( std::get< 0 >( vals ) ); !val )
            {
                assert_failed f( l );
                trace_format< trace_fmt::named, trace_level::debug >
                            ( f, names, std::tuple_cat( std::tie( val ), tuple_drop( vals ) ) );
                assert_signal( f );
            }
        }
    }

    template< typename value_t >
    struct rpad
    {
        int width;
        const value_t &val;

        rpad( int w, const value_t &v ) : width( w ), val( v ) {}

        friend string_builder &operator<<( string_builder &b, const rpad &p )
        {
            int start = b.size();
            b << p.val;
            int end = b.size();
            for ( int i = 0; i < p.width - end + start ; ++i )
                b << " ";
            return b;
        }
    };

    template< bool enable, typename op_t, typename... names_t, typename... vals_t >
    void assert_bin_fn( const trace_location &l, op_t op, std::string_view op_str,
                        std::tuple< names_t... > names, std::tuple< vals_t... > vals )
    {
        if constexpr ( enable )
        {
            bool pass;

            const auto &a_box = std::get< 0 >( vals );
            const auto &b_box = std::get< 1 >( vals );

            std::string_view a_str = std::get< 0 >( names ),
                             b_str = std::get< 1 >( names );

            if ( !singleton< assert_config >().quiet )
            {
                std::tuple prefix{ "assert ", a_str, " ", op_str, " ", b_str,
                                   sizeof...( names_t ) > 2 ? ": " : "" };

                trace_fn< trace_fmt::packed, trace_level::debug >
                (
                    l, std::tuple_cat( prefix, tuple_drop< 2 >( names ) ),
                       std::tuple_cat( prefix, tuple_drop< 2 >( vals ) )
                );
            }

            auto &&a = BRICK_FORCE( a_box );
            auto &&b = BRICK_FORCE( b_box );

            using a_t = std::remove_reference_t< decltype( a ) >;
            using b_t = std::remove_reference_t< decltype( b ) >;

            if constexpr ( std::is_integral_v< a_t > && std::is_integral_v< b_t > )
            {
                using common_t = std::common_type_t< decltype( a ), decltype( b ) >;
                pass = op( static_cast< common_t >( a ), static_cast< common_t >( b ) );
            }
            else
                pass = !!op( a, b );

            int eqw = std::max( a_str.size(), b_str.size() );

            if ( !pass )
            {
                assert_failed f( l );
                f << a_str << " " << op_str << " " << b_str;
                f << "\n  " << rpad( eqw, a_str ) << " = " << printable( a );
                f << "\n  " << rpad( eqw, b_str ) << " = " << printable( b );

                if constexpr ( sizeof...( names_t ) > 2 )
                    f << "\n  ";
                trace_format< trace_fmt::named, trace_level::debug >
                            ( f, tuple_drop< 2 >( names ), tuple_drop< 2 >( vals ) );

                assert_signal( f );
            }
        }
    }

    template< typename X >
    __boring void assert_pred_fn( const trace_location &l,
                                  std::string_view p_str,
                                  std::string_view x_str, X x, bool p )
    {
        if ( !p )
        {
            assert_failed f( l );
            f << "expected " << p_str << "( " << x_str << " )\n"
              << "  but " << x_str << " = " << x << "\n";
            assert_signal( f );
        }
    }
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
