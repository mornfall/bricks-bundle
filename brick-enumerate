#include "brick-nat"
#include <set>
#include <vector>
#include <numeric>

namespace brq::enumerate
{
    struct unbounded
    {
        int operator[]( std::size_t ) const { return 0; }
    };

    template< typename >
    struct is_unbounded : std::false_type {};

    template<>
    struct is_unbounded< unbounded > : std::true_type {};

    template< typename type >
    constexpr bool is_unbounded_v = is_unbounded< std::remove_cvref_t< type > >::value;

    auto find_block_gen( nat index, auto block, auto size, auto update_block )
    {
        while ( true )
        {
            auto skip = std::apply( size, block );

            if ( skip <= index )
                index -= skip;
            else
                return std::tuple_cat( std::tuple{ index }, block );

            std::apply( update_block, block );
        }
    }

    auto find_block( nat index, auto block, auto size )
    {
        return find_block_gen( index, std::tuple{ block }, size, []( auto &b ) { ++ b; } );
    }

    nat nat_enum( nat index ) { return index; }

    auto min_nonzero( const auto &a, const auto &b )
    {
        return a && a < b ? a : b;
    }

    template< std::size_t n, typename bound_t >
    nat tuple_block_size( nat b, int d, const std::array< bound_t, n > &bounds )
    {
        nat total = 1;

        for ( int i = 0; i < n; ++i )
        {
            if ( i == d && bounds[ i ] <= b )
                return 0;

            nat choices = i == d ? 1 : i < d ? b + 1 : b;
            total *= min_nonzero( bounds[ i ], choices );
        }

        return total;
    }

    template< typename bounds_t >
    nat tuple_block_size( nat b, int n, int d, const bounds_t &bounds = bounds_t() )
    {
        if ( n == 0 && b == 0 )
            return 1;

        if constexpr ( is_unbounded_v< bounds_t > )
            return ( b + 1 ).pow( d ) * b.pow( n - d - 1 );
        else
            return tuple_block_size( b, d, bounds );
    }

    template< std::size_t n, typename bound_t >
    nat tuple_count( nat b, const std::array< bound_t, n > &bounds )
    {
        nat add = 1, sub = 1;

        for ( int i = 0; i < n; ++i )
        {
            add *= min_nonzero( bounds[ i ], b + 1 );
            sub *= min_nonzero( bounds[ i ], b );
        }

        return add - sub;
    }

    template< typename bounds_t = unbounded >
    nat tuple_count( nat b, int n, const bounds_t &bounds = bounds_t() )
    {
        if ( b == 0 )
            return 1;

        if constexpr ( is_unbounded_v< decltype( bounds ) > )
            return ( b + 1 ).pow( n ) - b.pow( n );
        else
            return tuple_count( b, bounds );
    }


    template< int i = 0, typename bounds_t >
    nat tuple_bound( const bounds_t &bounds )
    {
        if constexpr ( is_unbounded_v< bounds_t > )
            return 0;
        else if constexpr ( i == std::tuple_size_v< bounds_t > )
            return 1;
        else
            return std::get< i >( bounds ) * tuple_bound< i + 1 >( bounds );
    }

    auto tuple_item( nat b, nat index, int i, int d, nat item_bound = 0 )
    {
        if ( i == d )
            return std::pair{ index, b };
        else
        {
            auto choices = min_nonzero( item_bound, i < d ? b + 1 : b );
            return divmod( index, choices );
        }
    }

    template< typename bounds_t = unbounded >
    auto tuple_block( nat b, int n, nat index, const bounds_t &bounds = bounds_t() )
    {
        return find_block( index, 0, [&]( auto d ) { return tuple_block_size( b, n, d, bounds ); } );
    }

    template< int n, typename bounds_t = unbounded >
    auto tuple_param( nat b, nat index, const bounds_t &bounds = bounds_t(), int d = 0 )
    {
        std::array< nat, n > r;
        std::tie( index, d ) = tuple_block( b, n, index, bounds );

        std::array< int, n > indices;
        std::iota( indices.begin(), indices.end(), 0 );
        std::stable_sort( indices.begin(), indices.end(),
                          [&]( int i, int j ) { return bounds[ i ] > bounds[ j ]; } );

        for ( auto i : indices )
            std::tie( index, r[ i ] ) = tuple_item( b, index, i, d, bounds[ i ] );

        return r;
    }

    template< int n, typename bounds_t = unbounded >
    auto tuple( nat index, const bounds_t &bounds = bounds_t() )
    {
        nat b = 0;

        if constexpr ( is_unbounded_v< decltype( bounds ) > )
        {
            b = index.nth_root( n );
            index -= b.pow( n );
        }

        /* TODO fast forward for the bounded case */

        auto next_block = [&]( auto b ) { return tuple_count( b, n, bounds ); };
        std::tie( index, b ) = find_block( index, b, next_block );
        return tuple_param< n >( b, index, bounds );
    }

    nat list_count( nat n )
    {
        return n <= 1 ? n + 1 : ( n.pow( n + 1 ) - 1 ) / ( n - 1 ); /* ∑₀ᵏnᵏ */
    };

    auto list_param( nat b, int n, nat index, int d = 0 )
    {
        std::vector< nat > r( n );
        std::tie( index, d ) = tuple_block( b, n, index );

        for ( int i = n - 1; i >= 0; --i )
            std::tie( index, r[ i ] ) = tuple_item( b, index, i, d );

        return r;
    }

    auto list( nat index )
    {
        nat b_idx, b_skip;
        int d = 0;

        for ( ; index > list_count( b_skip + 1 ); ++ b_skip );

        if ( b_skip >= 1 )
        {
            index -= list_count( b_skip ) + 1;
            b_idx = 2 + b_skip * ( b_skip + 1 );
        }

        auto block_size = []( nat b_idx )
        {
            auto [ n, b ] = tuple< 2 >( b_idx );
            return tuple_count( b, n.short_digit() );
        };

        std::tie( index, b_idx ) = find_block( index, b_idx, block_size );
        auto [ n, b ] = tuple< 2 >( b_idx );
        std::tie( index, d ) = tuple_block( b, n.short_digit(), index );
        std::vector< nat > r( n.short_digit() );

        for ( int i = 0; i < n; ++i )
            std::tie( index, r[ i ] ) = tuple_item( b, index, i, d );

        return r;
    }

    auto set_param( nat b, nat n, nat index )
    {
        std::set< nat > r;

        nat u = b;
        nat v = n;
        ASSERT_LT( index, comb( b, n ) );

        nat x = comb( b, n ) - index - 1;

        for ( nat i = 0; i < n; ++i )
        {
            do
                u -= 1;
            while ( comb( u, v ) > x );
            r.insert( b - 1 - u );
            x -= comb( u, v );
            v -= 1;
        }

        return r;
    }

    auto set( nat index )
    {
        std::set< nat > r;

        if ( index == 0 )
            return r;

        nat b = 0;
        for ( ; nat( 2 ).pow( b + 1 ) <= index; ++b );
        ASSERT_LEQ( nat( 2 ).pow( b ), index );
        index -= nat( 2 ).pow( b );
        auto [ i_block, n ] = find_block( index, 0, [&]( auto n ) { return comb( b, n ); } );

        r = set_param( b, n, i_block );
        r.insert( b );
        return r;
    }

    nat map_count( nat b, int n )
    {
        return comb( b, n ) * tuple_count( b, n );
    }

    std::map< nat, nat > map( nat index )
    {
        auto update_count = []( auto &b, auto &n ) { n = 1; ++ b; };
        int b, n;
        std::tie( index, b, n ) =
            find_block_gen( index, std::tuple( 0, 1 ), map_count, update_count );

        if ( n == 0 )
            return {};

        std::map< nat, nat > r;

        auto [ i, j ] = divmod( index, tuple_count( b, n ) );
        auto keys   = set_param( b, std::min( n, b ), i );
        auto values = list_param( b, n, j );

        auto k_it = keys.begin();
        auto v_it = values.begin();

        for ( ; k_it != keys.end(); ++k_it, ++v_it )
            r.emplace( *k_it,  *v_it );

        return r;
    }
}

namespace brq
{
    template< int n > auto tuple_enum( nat index ) { return enumerate::tuple< n >( index ); }
    std::vector< nat > list_enum( nat index ) { return enumerate::list( index ); }
    std::set< nat > set_enum( nat index ) { return enumerate::set( index ); }
}
