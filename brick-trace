// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Macros for run-time-configurable debug tracing.
 */

/*
 * (c) 2019 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-min"
#include <array>

#ifdef __divine__
#include <sys/cdefs.h>
#include <sys/trace.h>
#include <util/array.hpp>
#else
#include <vector>
#include <cstring>
#include <pthread.h>
#define __debugfn
#define __boring
#endif

#ifdef __unix__
#include <unistd.h>
#include <syslog.h>
#else
#include <cstdio>
#endif

/* The purpose of the TRACE macro is to allow tracing statements to be included
 * in production code, just like ASSERT macros allow for sanity checks and
 * pre/post-condition checking. If compiled with NDEBUG, it's a noop and in
 * debug builds, the output must be enabled by setting environment variables
 * TRACE and optionally BRICK_NOTRACE, which accept either `all`, a file
 * name (without path) or a file name and a line number (formatted like
 * `file.cpp:15`). A runtime-disabled trace point compiles to a few lookups in
 * std::unordered_set.
 *
 * Normally, the formatted trace output is printed using std::cerr. The
 * formatting is done using a brq::string_builder (see below) to cut down on
 * overhead and to prevent exceptions being thrown. When built for DiOS, the
 * output is done unconditionally using the __dios_trace mechanism, and the
 * entire trace function is marked as __debugfn (i.e. it is not executed during
 * model checking, only for counter-example generation -- TRACE therefore only
 * causes very modest overhead in DIVINE). */

#define BRICK_SHARP_6(x, ...) #x, __VA_OPT__( BRICK_SHARP_7( __VA_ARGS__ ) )
#define BRICK_SHARP_5(x, ...) #x, __VA_OPT__( BRICK_SHARP_6( __VA_ARGS__ ) )
#define BRICK_SHARP_4(x, ...) #x, __VA_OPT__( BRICK_SHARP_5( __VA_ARGS__ ) )
#define BRICK_SHARP_3(x, ...) #x, __VA_OPT__( BRICK_SHARP_4( __VA_ARGS__ ) )
#define BRICK_SHARP_2(x, ...) #x, __VA_OPT__( BRICK_SHARP_3( __VA_ARGS__ ) )
#define BRICK_SHARP_1(x, ...) #x, __VA_OPT__( BRICK_SHARP_2( __VA_ARGS__ ) )
#define BRICK_SHARP_0(x, ...) #x, __VA_OPT__( BRICK_SHARP_1( __VA_ARGS__ ) )
#define BRICK_LOCATION      ::brq::trace_location{ __LINE__, __FILE__ }
#define BRICK_TRACE(NF, N, ...) ::brq::trace_fn< NF >( N, BRICK_LOCATION, \
                                                       std::tuple{ BRICK_SHARP_0( __VA_ARGS__ ) }, \
                                                       std::forward_as_tuple( __VA_ARGS__ ) )

#ifdef NDEBUG
#define TRACE(...) static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define NOISE(...) static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#else
#define TRACE(...) BRICK_TRACE( true,  ::brq::trace_level::trace, __VA_ARGS__ )
#define NOISE(...) BRICK_TRACE( true,  ::brq::trace_level::noise, __VA_ARGS__ )
#endif
#define DEBUG(...) BRICK_TRACE( true,  ::brq::trace_level::debug, __VA_ARGS__ )
#define INFO(...)  BRICK_TRACE( false, ::brq::trace_level::info, __VA_ARGS__ )
#define WARN(...)  BRICK_TRACE( false, ::brq::trace_level::warn, __VA_ARGS__ )
#define ERROR(...) BRICK_TRACE( false, ::brq::trace_level::error, __VA_ARGS__ )

namespace brq
{
    /* Wrap __FILE__ and __LINE__. Needs to be cheap to construct and pass
     * around, since in debug builds this happens a lot. */

    struct trace_location
    {
        int line;
        const char *_file;

        std::string_view filename() const noexcept
        {
            std::string_view r( _file );
            auto idx = r.rfind( '/' );
            r.remove_prefix( idx == r.npos ? 0 : idx + 1 );
            return r;
        }

        std::string_view file() const noexcept
        {
            return _file;
        }
    };

    enum class trace_level
    {
        error, warn, info, debug, trace, noise
    };

    static constexpr std::array< const char *, 6 > trace_level_name =
        { "error", "warning", "info", "debug", "trace", "noise" };


    /* In debug builds, decide which traces are active at run-time. This is to
     * prevent swamping the user with irrelevant traces from library code they
     * might be using. For short programs (e.g. unit tests), it might be okay
     * to just say `env TRACE=+ program`. */

    template< typename T >
    T &singleton() noexcept( std::is_nothrow_default_constructible_v< T > )
    {
        static T value;
        return value;
    }

    struct trace
    {
        struct rule_t
        {
            std::string_view suffix;
            int line;
            trace_level level;
        };

#ifdef __divine__
        using rules_t = __dios::Array< rule_t >;
        static constexpr bool nothrow = true;
#else
        using rules_t = std::vector< rule_t >;
        static constexpr bool nothrow = false;
#endif
        rules_t _rules;
        bool _print_tid = false, _print_location = false, _use_syslog = false, _use_buffer = false;
        string_builder _syslog_meta;
        string_builder _buffer;

        void use_syslog( bool s = true, std::string_view meta = "" )
        {
            _use_syslog = s;
            _syslog_meta.clear();
            if ( !meta.empty() )
                _syslog_meta << meta << " ";
        }

        void use_buffer( bool s = true )
        {
            _use_buffer = s;
            _buffer.clear();
        }

        trace() noexcept( nothrow )
        {
            if ( auto env = getenv( "TRACE" ) )
            {
                add_rules( env );
                _print_location = true;
            }
            else
                add_rule( "+", trace_level::info, 0 );
        }

        static std::string_view level( trace_level i ) noexcept
        {
            return trace_level_name[ int( i ) ];
        }

        static trace_level level( std::string_view name ) noexcept
        {
            for ( int i = 0; i < int( trace_level_name.size() ); ++i )
                if ( trace_level_name[ i ] == name )
                    return trace_level( i );
            return trace_level::debug;
        }

        void add_rule( std::string_view s, std::string_view l ) noexcept ( nothrow )
        {
            add_rule( s, level( l ) );
        }

        void add_rule( std::string_view suffix, trace_level level, int line = 0 ) noexcept ( nothrow )
        {
            _rules.push_back( rule_t{ suffix, line, level } );
        }

        void add_rules( std::string_view str ) noexcept ( nothrow )
        {
            while ( !str.empty() )
            {
                auto [ first, rest ] = split( str, ',' );
                auto [ spec, level_s ] = split( first, '/' );
                auto [ filename, line_s ] = split( spec, ':' );

                int line = 0;
                trace_level lvl = level( level_s );

                if ( line_s.size() )
                    line = strtol( line_s.begin(), nullptr, 10 );

                add_rule( filename, lvl, line );
                str = rest;
            }
        }

        bool enabled( trace_level level, const trace_location &l ) noexcept
        {
            bool print = false;

            auto f = l.file();
            for ( auto r : _rules )
            {
                auto s = r.suffix;
                if ( s == "+" || s == "*" || ends_with( f, r.suffix ) )
                {
                    if ( r.line && r.line != l.line )
                        continue; /* no match */
                    print = int( r.level ) >= int( level );
                }
            }

            return print;
        }

        bool prepare( string_builder &b, trace_level level, trace_location location ) noexcept
        {
            if ( !enabled( level, location ) )
                return false;

            b << "[" << this->level( level ) << "] ";
            if ( _print_location )
                b << location.filename() << ":" << location.line << ": ";
            if ( _print_tid )
                b << "[" << pthread_self() << "] ";

            return true;
        }

#ifdef __divine__
        void do_print( string_builder &b, trace_level ) noexcept
        {
            if ( b.truncated() )
                __vm_cancel();
            __dios_trace_internal( 0, "%s", b.buffer() );
        }
#else
        void do_print( string_builder &b, trace_level level ) noexcept
        {
            b << "\n";
#ifdef __unix__
            if ( _use_syslog )
                ::syslog( level > trace_level::error ? LOG_DEBUG : LOG_INFO,
                          "%s%s", _syslog_meta.buffer(), b.buffer() );
            else
                ::write( 2, b.buffer(), b.size() );
#else
            std::fwrite( b.buffer(), 1, b.size(), stderr );
            std::fflush( stderr );
#endif
        }
#endif

        void print( string_builder &b, trace_level level ) noexcept
        {
            if ( _use_buffer )
                _buffer << b.data() << "\n";
            else
                do_print( b, level );
        }
    };

    inline struct trace &trace() noexcept { return singleton< struct trace >(); }

    template< bool debug_trace, typename... names_t, typename... vals_t >
    void trace_format( brq::string_builder &b,
                       const std::tuple< names_t... > &names,
                       const std::tuple< vals_t... > &vals,
                       bool comma = false ) noexcept
    {
        static_assert( sizeof...( vals_t ) == sizeof...( names_t ) );
        auto fa = [&]( auto... args ) { format_args< debug_trace >( " ", b, args... ); };

        if constexpr ( !debug_trace )
            return std::apply( fa, vals );
        else if constexpr ( sizeof...( vals_t ) == 0 )
            return;
        else
        {
            const auto &a = std::get< 0 >( vals );
            std::string_view a_name = std::get< 0 >( names );

            string_builder a_str;
            format_arg< true >( a_str, a );
            bool literal = a_str.data() == a_name ||
                           a_name.substr( 1, a_name.size() - 2 ) == a_str.data();

            if ( comma && !literal )
                b << ", ";

            if ( literal )
                b << a_str;
            else
                b << a_name << " ‚Üí " << a_str;

            return trace_format< true >( b, tuple_drop( names ), tuple_drop( vals ), comma || !literal );
        }
    }

    template< bool debug_trace, typename... names_t, typename... vals_t >
    __debugfn void trace_fn( trace_level level, trace_location location,
                             const std::tuple< names_t... > &names,
                             const std::tuple< vals_t... > &vals ) noexcept
    {
        string_builder builder;

        if ( trace()._use_buffer )
        {
            trace_format< debug_trace >( trace()._buffer, names, vals );
            trace()._buffer << "\n";
        }
        else if ( trace().prepare( builder, level, location ) )
        {
            trace_format< debug_trace >( builder, names, vals );
            trace().do_print( builder, level );
        }
    }
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
